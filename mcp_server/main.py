# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:15:23+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Query

from models import (
    Alt,
    FieldXgafv,
    GoogleCloudPrivatecatalogproducerV1beta1Association,
    GoogleCloudPrivatecatalogproducerV1beta1Catalog,
    GoogleCloudPrivatecatalogproducerV1beta1CopyProductRequest,
    GoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest,
    GoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponse,
    GoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponse,
    GoogleCloudPrivatecatalogproducerV1beta1ListProductsResponse,
    GoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponse,
    GoogleCloudPrivatecatalogproducerV1beta1Product,
    GoogleCloudPrivatecatalogproducerV1beta1UndeleteCatalogRequest,
    GoogleCloudPrivatecatalogproducerV1beta1UploadIconRequest,
    GoogleCloudPrivatecatalogproducerV1beta1Version,
    GoogleIamV1Policy,
    GoogleIamV1SetIamPolicyRequest,
    GoogleIamV1TestIamPermissionsRequest,
    GoogleIamV1TestIamPermissionsResponse,
    GoogleLongrunningCancelOperationRequest,
    GoogleLongrunningListOperationsResponse,
    GoogleLongrunningOperation,
    GoogleProtobufEmpty,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com'},
    description='Enables cloud users to manage and share enterprise catalogs intheir organizations.',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='Cloud Private Catalog Producer',
    version='v1beta1',
    servers=[{'url': 'https://cloudprivatecatalogproducer.googleapis.com/'}],
)


@app.get(
    '/v1beta1/catalogs',
    description=""" Lists Catalog resources that the producer has access to, within the
scope of the parent resource. """,
    tags=['product_management', 'operation_tracking'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_list(
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    parent: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/catalogs',
    description=""" Creates a new Catalog resource. """,
    tags=['catalog_management', 'product_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_create(
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleCloudPrivatecatalogproducerV1beta1Catalog = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/operations',
    description=""" Lists operations that match the specified filter in the request. If the
server doesn't support this method, it returns `UNIMPLEMENTED`.

NOTE: the `name` binding allows API services to override the binding
to use different resource name schemes, such as `users/*/operations`. To
override the binding, API services can add a binding such as
`"/v1/{name=users/*}/operations"` to their service configuration.
For backwards compatibility, the default name includes the operations
collection id, however overriding users must ensure the name binding
is the parent resource, without the operations collection id. """,
    tags=[
        'catalog_management',
        'product_management',
        'operation_tracking',
        'iam_policy_handling',
        'association_tracking',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_operations_list(
    filter: Optional[str] = None,
    name: Optional[str] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1beta1/{name}',
    description=""" Hard deletes a Version. """,
    tags=['product_management', 'association_tracking'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_products_versions_delete(
    name: str,
    force: Optional[bool] = None,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{name}',
    description=""" Returns the requested Version resource. """,
    tags=['catalog_management', 'product_management', 'operation_tracking'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_products_versions_get(
    name: str,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v1beta1/{name}',
    description=""" Updates a specific Version resource. """,
    tags=['catalog_management', 'product_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_products_versions_patch(
    name: str,
    update_mask: Optional[str] = Query(None, alias='updateMask'),
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleCloudPrivatecatalogproducerV1beta1Version = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{name}:cancel',
    description=""" Starts asynchronous cancellation on a long-running operation.  The server
makes a best effort to cancel the operation, but success is not
guaranteed.  If the server doesn't support this method, it returns
`google.rpc.Code.UNIMPLEMENTED`.  Clients can use
Operations.GetOperation or
other methods to check whether the cancellation succeeded or whether the
operation completed despite cancellation. On successful cancellation,
the operation is not deleted; instead, it becomes an operation with
an Operation.error value with a google.rpc.Status.code of 1,
corresponding to `Code.CANCELLED`. """,
    tags=['operation_tracking', 'catalog_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_operations_cancel(
    name: str,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleLongrunningCancelOperationRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{name}:copy',
    description=""" Copies a Product under another Catalog. """,
    tags=['catalog_management', 'product_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_products_copy(
    name: str,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleCloudPrivatecatalogproducerV1beta1CopyProductRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{name}:undelete',
    description=""" Undeletes a deleted Catalog and all resources under it. """,
    tags=['catalog_management', 'product_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_undelete(
    name: str,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleCloudPrivatecatalogproducerV1beta1UndeleteCatalogRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{parent}/associations',
    description=""" Lists all Association resources under a catalog. """,
    tags=['catalog_management', 'product_management', 'operation_tracking'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_associations_list(
    parent: str,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{parent}/associations',
    description=""" Creates an Association instance under a given Catalog. """,
    tags=['catalog_management', 'association_tracking'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_associations_create(
    parent: str,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{parent}/products',
    description=""" Lists Product resources that the producer has access to, within the
scope of the parent catalog. """,
    tags=['product_management', 'catalog_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_products_list(
    parent: str,
    filter: Optional[str] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{parent}/products',
    description=""" Creates a Product instance under a given Catalog. """,
    tags=['product_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_products_create(
    parent: str,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleCloudPrivatecatalogproducerV1beta1Product = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{parent}/versions',
    description=""" Lists Version resources that the producer has access to, within the
scope of the parent Product. """,
    tags=[
        'catalog_management',
        'product_management',
        'operation_tracking',
        'iam_policy_handling',
        'association_tracking',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_products_versions_list(
    parent: str,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{parent}/versions',
    description=""" Creates a Version instance under a given Product. """,
    tags=['catalog_management', 'product_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_products_versions_create(
    parent: str,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleCloudPrivatecatalogproducerV1beta1Version = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{product}/icons:upload',
    description=""" Creates an Icon instance under a given Product.
If Product only has a default icon, a new Icon
instance is created and associated with the given Product.
If Product already has a non-default icon, the action creates
a new Icon instance, associates the newly created
Icon with the given Product and deletes the old icon. """,
    tags=['product_management', 'catalog_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_products_icons_upload(
    product: str,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleCloudPrivatecatalogproducerV1beta1UploadIconRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{resource}:getIamPolicy',
    description=""" Gets IAM policy for the specified Catalog. """,
    tags=['iam_policy_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_get_iam_policy(
    resource: str,
    options_requested_policy_version: Optional[int] = Query(
        None, alias='options.requestedPolicyVersion'
    ),
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{resource}:setIamPolicy',
    description=""" Sets the IAM policy for the specified Catalog. """,
    tags=['iam_policy_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_set_iam_policy(
    resource: str,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleIamV1SetIamPolicyRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{resource}:testIamPermissions',
    description=""" Tests the IAM permissions for the specified Catalog. """,
    tags=['iam_policy_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cloudprivatecatalogproducer_catalogs_test_iam_permissions(
    resource: str,
    alt: Optional[Alt] = 'json',
    key: Optional[str] = None,
    access_token: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    oauth_token: Optional[str] = None,
    callback: Optional[str] = None,
    body: GoogleIamV1TestIamPermissionsRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
